import React, { useState } from 'react';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import Header from '../components/Header';
import Footer from '../components/Footer';
import './CheckoutPage.css'; // ‚úÖ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∏

function CheckoutPage() {
  const { cartItems, clearCart } = useCart();
  const { user } = useAuth();
  const navigate = useNavigate();

  const [address, setAddress] = useState('');
  const [novaPoshta, setNovaPoshta] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('cod');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const handleSubmit = async () => {
    if (!address || !novaPoshta || !paymentMethod) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const res = await fetch('http://localhost:3000/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({
          items: cartItems.map(item => ({
            product: item._id,
            quantity: item.quantity,
          })),
          address,
          novaPoshta,
          paymentMethod,
        }),
      });

      const data = await res.json();
      if (!res.ok) {
        setError(data.error || '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        setLoading(false);
        return;
      }

      clearCart();
      navigate('/thanks');
    } catch (err) {
      setError('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      setLoading(false);
    }
  };

  return (
    <>
      <Header />
      <main className="checkout-grid">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ç–æ–≤–∞—Ä—ã */}
        <section className="checkout-left">
          <h2>üßæ –í–∞—à –∑–∞–∫–∞–∑</h2>
          <ul className="checkout-list">
            {cartItems.map(item => (
              <li key={item._id}>
                {item.name} ‚Äî {item.quantity} —à—Ç. √ó {item.price} –≥—Ä–Ω
              </li>
            ))}
          </ul>
          <p className="checkout-total"><strong>–ò—Ç–æ–≥–æ:</strong> {total} –≥—Ä–Ω</p>

          <button onClick={() => navigate('/cart')} className="btn-back">‚¨Ö –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
        </section>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ñ–æ—Ä–º–∞ */}
        <section className="checkout-right">
          <h2>üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞</h2>

          <div className="checkout-user">
            <p><strong>–ò–º—è:</strong> {user?.name}</p>
            <p><strong>Email:</strong> {user?.email}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {user?.phone}</p>
          </div>

          <input
            type="text"
            placeholder="–ê–¥—Ä–µ—Å"
            value={address}
            onChange={e => setAddress(e.target.value)}
            className="checkout-input"
          />
          <input
            type="text"
            placeholder="–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã"
            value={novaPoshta}
            onChange={e => setNovaPoshta(e.target.value)}
            className="checkout-input"
          />

          <div className="checkout-payment">
            <label>
              <input
                type="radio"
                value="cod"
                checked={paymentMethod === 'cod'}
                onChange={e => setPaymentMethod(e.target.value)}
              />
              –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
            </label>
            <label>
              <input
                type="radio"
                value="card"
                checked={paymentMethod === 'card'}
                onChange={e => setPaymentMethod(e.target.value)}
              />
              –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
            </label>
          </div>

          {error && <p className="checkout-error">{error}</p>}

          <button onClick={handleSubmit} disabled={loading} className="btn-order">
            {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
          </button>
        </section>
      </main>
      <Footer />
    </>
  );
}

export default CheckoutPage;

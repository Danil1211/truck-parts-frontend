import React, { useEffect, useState } from 'react';
import Header from '../components/Header';
import Footer from '../components/Footer';
import './AdminOrdersPage.css';

function AdminOrdersPage() {
  const [orders, setOrders] = useState([]);
  const [error, setError] = useState('');

  useEffect(() => {
    fetch('http://localhost:3000/api/orders/admin', {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.error) throw new Error(data.error);
        setOrders(data);
      })
      .catch((err) => setError(err.message));
  }, []);

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      const res = await fetch(`http://localhost:3000/api/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({ status: newStatus }),
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');

      setOrders((prev) =>
        prev.map((order) =>
          order._id === orderId ? { ...order, status: newStatus } : order
        )
      );
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + err.message);
    }
  };

  return (
    <>
      <Header />
      <main className="container" style={{ padding: '2rem' }}>
        <h1>üì¶ –ó–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)</h1>
        {error && <p className="error">{error}</p>}
        {orders.length === 0 && !error && <p>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>}

        {orders.length > 0 && (
          <table className="orders-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>–ö–ª–∏–µ–Ω—Ç</th>
                <th>–ê–¥—Ä–µ—Å</th>
                <th>–ù–æ–≤–∞—è –ü–æ—á—Ç–∞</th>
                <th>–°—É–º–º–∞</th>
                <th>–û–ø–ª–∞—Ç–∞</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–¢–æ–≤–∞—Ä—ã</th>
              </tr>
            </thead>
            <tbody>
              {orders.map((order) => (
                <tr key={order._id}>
                  <td>{order._id.slice(-6)}</td>
                  <td>{order.user?.name}</td>
                  <td>{order.address}</td>
                  <td>{order.novaPoshta}</td>
                  <td>{order.total} –≥—Ä–Ω</td>
                  <td>{order.paymentMethod === 'cod' ? '–ù–∞–ª–æ–∂–∫–∞' : '–ö–∞—Ä—Ç–∞'}</td>
                  <td>
                    <select
                      value={order.status}
                      onChange={(e) => handleStatusChange(order._id, e.target.value)}
                    >
                      <option value="–Ω–æ–≤—ã–π">–Ω–æ–≤—ã–π</option>
                      <option value="–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ">–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</option>
                      <option value="–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω">–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</option>
                      <option value="–¥–æ—Å—Ç–∞–≤–ª–µ–Ω">–¥–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
                      <option value="–æ—Ç–º–µ–Ω—ë–Ω">–æ—Ç–º–µ–Ω—ë–Ω</option>
                    </select>
                  </td>
                  <td>
                    {order.items.map((item, idx) => (
                      <div key={idx}>
                        {item.product?.name || '‚Äî'} √ó {item.quantity}
                      </div>
                    ))}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </main>
      <Footer />
    </>
  );
}

export default AdminOrdersPage;
